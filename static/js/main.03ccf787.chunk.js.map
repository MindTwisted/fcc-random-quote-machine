{"version":3,"sources":["utils/helpers.ts","components/QuoteMachine.tsx","api/quotes.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["getRandomArrayElement","array","max","length","Math","floor","random","getRandomHexColor","toString","getTumblrUrl","quote","author","QuoteMachine","useState","color","setColor","quotes","setQuotes","currentQuote","setCurrentQuote","errorMessage","setErrorMessage","fetchQuotes","useCallback","a","axios","get","quotesResponse","data","message","useEffect","className","style","backgroundColor","id","title","target","rel","href","onClick","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"8VAEO,SAASA,EAAuBC,GACrC,IAAMC,EAAMD,EAAME,OAAS,EAI3B,OAAOF,EAFaG,KAAKC,MAAMD,KAAKE,UAAYJ,EADpC,EACgD,IADhD,GAMP,SAASK,IACd,MAAO,IAAMH,KAAKC,MAAsB,SAAhBD,KAAKE,UAAqBE,SAAS,IAOtD,SAASC,EAAcC,GAC5B,MAAM,6FAAN,OAAoGA,EAAMC,OAA1G,oBAA4HD,EAAMA,MAAlI,wFCbF,IAqFeE,EArFgB,WAAO,IDQPF,ECRM,EACTG,mBAAS,WADA,mBAC5BC,EAD4B,KACrBC,EADqB,OAEPF,mBAAkB,IAFX,mBAE5BG,EAF4B,KAEpBC,EAFoB,OAGKJ,mBAAuB,MAH5B,mBAG5BK,EAH4B,KAGdC,EAHc,OAIKN,mBAAS,aAJd,mBAI5BO,EAJ4B,KAIdC,EAJc,KAM7BC,EAAcC,sBAAW,sBAAC,8BAAAC,EAAA,+ECJzBC,IAAMC,IAAI,0IDIe,OAEtBC,EAFsB,OAGtBX,EAASW,EAAeC,KAAKZ,OAEnCC,EAAUD,GACVG,EAAgBnB,EAAsBgB,IACtCD,EAASR,KAPmB,kDAS5Bc,EAAgB,KAAEQ,SATU,0DAW7B,IAUH,OAJAC,qBAAU,WACRR,MACC,CAACA,IAGF,yBAAKS,UAAU,eAAeC,MAAO,CAAEC,gBAAiBnB,IACrDI,EACC,yBAAKa,UAAU,qBACbG,GAAG,aAEH,yBAAKH,UAAU,yBACb,yBAAKA,UAAU,sBACbC,MAAO,CAAElB,MAAOA,IAEhB,uBAAGiB,UAAU,qBACb,0BAAMG,GAAG,QAAT,IAAkBhB,EAAaR,QAEjC,yBAAKqB,UAAU,uBACbC,MAAO,CAAElB,MAAOA,IAEhB,0BAAMoB,GAAG,UAAT,KAAqBhB,EAAaP,UAGtC,yBAAKoB,UAAU,0BACb,yBAAKA,UAAU,yBACb,uBAAGA,UAAU,MACXG,GAAG,cACHC,MAAM,oBACNC,OAAO,SACPC,IAAI,sBACJC,MD7Ce5B,EC6CKQ,ED5C5B,sFAAN,OAA6FR,EAAMA,MAAnG,YAA4GA,EAAMC,SC6CpGqB,MAAO,CAAEC,gBAAiBnB,IAE1B,uBAAGiB,UAAU,oBAEf,uBAAGA,UAAU,MACXG,GAAG,eACHC,MAAM,6BACNC,OAAO,SACPC,IAAI,sBACJC,KAAM7B,EAAaS,GACnBc,MAAO,CAAEC,gBAAiBnB,IAE1B,uBAAGiB,UAAU,oBAGjB,4BAAQA,UAAU,MAChBG,GAAG,YACHK,QArDQ,WAClBpB,EAAgBnB,EAAsBgB,IACtCD,EAASR,MAoDCyB,MAAO,CAAEC,gBAAiBnB,IAH5B,eAUJ,4BAAKM,KEzEEoB,MARf,WACE,OACE,yBAAKT,UAAU,OACb,kBAAC,EAAD,QCKcU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDgIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAM7B,c","file":"static/js/main.03ccf787.chunk.js","sourcesContent":["import { Quote } from '../models/Quote'\r\n\r\nexport function getRandomArrayElement (array: Array<any>): any {\r\n  const max = array.length - 1\r\n  const min = 0\r\n  const randomIndex = Math.floor(Math.random() * (max - min + 1)) + min\r\n\r\n  return array[randomIndex]\r\n}\r\n\r\nexport function getRandomHexColor (): string {\r\n  return '#' + Math.floor(Math.random() * 16777215).toString(16)\r\n}\r\n\r\nexport function getTwitterUrl (quote: Quote): string {\r\n  return `https://twitter.com/intent/tweet?hashtags=quotes&amp;related=freecodecamp&amp;text=${quote.quote} ${quote.author}`\r\n}\r\n\r\nexport function getTumblrUrl (quote: Quote): string {\r\n  return `https://www.tumblr.com/widgets/share/tool?posttype=quote&tags=quotes,freecodecamp&caption=${quote.author}&content=${quote.quote}&canonicalUrl=https%3A%2F%2Fwww.tumblr.com%2Fbuttons&shareSource=tumblr_share_button`\r\n}\r\n","import React, { useCallback, useEffect, useState } from 'react'\r\nimport './QuoteMachine.css'\r\nimport { Quote } from '../models/Quote'\r\nimport { getQuotes } from '../api/quotes'\r\nimport { getRandomArrayElement, getRandomHexColor, getTumblrUrl, getTwitterUrl } from '../utils/helpers'\r\n\r\nconst QuoteMachine: React.FC = () => {\r\n  const [color, setColor] = useState('#999999')\r\n  const [quotes, setQuotes] = useState<Quote[]>([])\r\n  const [currentQuote, setCurrentQuote] = useState<Quote | null>(null)\r\n  const [errorMessage, setErrorMessage] = useState('Loading..')\r\n\r\n  const fetchQuotes = useCallback(async () => {\r\n    try {\r\n      const quotesResponse = await getQuotes()\r\n      const quotes = quotesResponse.data.quotes\r\n\r\n      setQuotes(quotes)\r\n      setCurrentQuote(getRandomArrayElement(quotes))\r\n      setColor(getRandomHexColor())\r\n    } catch (e) {\r\n      setErrorMessage(e.message)\r\n    }\r\n  }, [])\r\n  const changeQuote = () => {\r\n    setCurrentQuote(getRandomArrayElement(quotes))\r\n    setColor(getRandomHexColor())\r\n  }\r\n\r\n  useEffect(() => {\r\n    fetchQuotes()\r\n  }, [fetchQuotes])\r\n\r\n  return (\r\n    <div className='quoteMachine' style={{ backgroundColor: color }}>\r\n      {currentQuote ? (\r\n        <div className='quoteMachine__main'\r\n          id='quote-box'\r\n        >\r\n          <div className='quoteMachine__content'>\r\n            <div className='quoteMachine__quote'\r\n              style={{ color: color }}\r\n            >\r\n              <i className='fa fa-quote-left'/>\r\n              <span id='text'> {currentQuote.quote}</span>\r\n            </div>\r\n            <div className='quoteMachine__author'\r\n              style={{ color: color }}\r\n            >\r\n              <span id='author'>- {currentQuote.author}</span>\r\n            </div>\r\n          </div>\r\n          <div className='quoteMachine__controls'>\r\n            <div className='quoteMachine__socials'>\r\n              <a className='btn'\r\n                id='tweet-quote'\r\n                title='Tweet this quote!'\r\n                target='_blank'\r\n                rel='noopener noreferrer'\r\n                href={getTwitterUrl(currentQuote)}\r\n                style={{ backgroundColor: color }}\r\n              >\r\n                <i className='fab fa-twitter' />\r\n              </a>\r\n              <a className='btn'\r\n                id='tumblr-quote'\r\n                title='Post this quote on tumblr!'\r\n                target='_blank'\r\n                rel='noopener noreferrer'\r\n                href={getTumblrUrl(currentQuote)}\r\n                style={{ backgroundColor: color }}\r\n              >\r\n                <i className='fab fa-tumblr' />\r\n              </a>\r\n            </div>\r\n            <button className='btn'\r\n              id='new-quote'\r\n              onClick={changeQuote}\r\n              style={{ backgroundColor: color }}\r\n            >\r\n                New quote\r\n            </button>\r\n          </div>\r\n        </div>\r\n      ) : (\r\n        <h1>{errorMessage}</h1>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default QuoteMachine\r\n","import axios, { AxiosResponse } from 'axios'\r\nimport { Quote } from '../models/Quote'\r\n\r\ntype GetQuotesResponse = {\r\n    quotes: Quote[]\r\n}\r\n\r\nexport function getQuotes (): Promise<AxiosResponse<GetQuotesResponse>> {\r\n  return axios.get('https://gist.githubusercontent.com/camperbot/5a022b72e96c4c9585c32bf6a75f62d9/raw/e3c6895ce42069f0ee7e991229064f167fe8ccdc/quotes.json')\r\n}\r\n","import React from 'react'\nimport './App.css'\nimport QuoteMachine from './components/QuoteMachine'\n\nfunction App () {\n  return (\n    <div className='App'>\n      <QuoteMachine />\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register (config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    )\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW (swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker (swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister () {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister()\n      })\n      .catch(error => {\n        console.error(error.message)\n      })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport '@fortawesome/fontawesome-free/css/all.css'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}